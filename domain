;(when (not (visited ?next-pos)) (and (at ?next-pos) (not (at ?current-pos)) (visited ?next-pos)))

;defineste niveluri de dificultate pentru actiuni
;defineste cata energie primeste de la fiecare coordonata 
;eventual se face asta cu contingent planning - sa isi intoarca panourile solare si sa isi dea seama de unde 
;primeste mai multa energie
;sa am mai multe actiuni
;vartejuri care sa il curete

;sensing pe partea cu cum se misca panel-urile

;am facut max light pe panel-uri - sa fie mereu 4
;daca e lumina pe panel 1 - merge in fata x, y++
;daca e lumina pe panel 2 - merge in dreapta x, y--
;daca e lumina pe panel 3 - merge in spate x++, y
;daca e lumina pe panel 4 - merge in stanga x--, y


(define (domain mars-exploration)
(:predicates (loc ?p)
             (at ?x ?y)
             (connection ?p1 ?p2)
             (visited ?x ?y)
             (soil-analysed ?x ?y)
             (rock-analysed ?x ?y)
             (empty ?c)
             (soil-sample ?s ?x ?y)
             (rock-sample ?s ?x ?y)
             (soil-container ?s)
             (rock-container ?s)
             (image-storage ?s)
             (level ?l)
             (battery ?b)
             (battery-level ?b ?l)
             (critical ?l)
            (next-easy ?l1 ?l2)
             (next-medium ?l1 ?l2)
             (next-hard ?l1 ?l2)
             (next-charge ?l1 ?l2)
             (easy-rock ?x ?y)
             (medium-rock ?x ?y)
             (hard-rock ?x ?y)
             (easy-soil ?x ?y)
             (medium-soil ?x ?y)
             (hard-soil ?x ?y)
             (image-taken ?x ?y)
             (panel ?p)
             (max-light ?p)
             (panel-opened)
             (closed ?p))

;;;;;;;;;;;;;;;;movement;;;;;;;;;;;;;;;;;;
(:action move
    :parameters(?current-pos-x ?current-pos-y
                ?next-pos-x ?next-pos-y
                ?battery ?level-current 
                ?level-next-easy ?level-next-medium ?level-next-hard)
    :precondition(and (loc ?current-pos-x) (loc ?current-pos-y)
                      (loc ?next-pos-x) (loc ?next-pos-y)
                      (at ?current-pos-x ?current-pos-y) 
                      (connection ?current-pos-x ?next-pos-x)
                      (connection ?current-pos-y ?next-pos-y)
                      (level ?level-next-easy)
                      (level ?level-next-medium)
                      (level ?level-next-hard)
                      (battery-level ?battery ?level-current)
                      (next-easy ?level-current ?level-next-easy) 
                      (next-medium ?level-current ?level-next-medium)
                      (next-hard ?level-current ?level-next-hard)
                      (not (critical ?level-current))
                 )
    :effect(and (at ?next-pos-x ?next-pos-y) 
                (not (at ?current-pos-x ?current-pos-y)) 
                (visited ?next-pos-x ?next-pos-y)
                (not (battery-level ?battery ?level-current)) 
                (when (easy-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-easy))  
                (when (medium-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-medium))
                (when (hard-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-hard))               
           )
)

;;;;;;;;;;;;;;;;soil;;;;;;;;;;;;;;;;;;
(:action collect-soil
    :parameters (?current-pos-x ?current-pos-y ?container
                 ?battery ?level-current 
                 ?level-next-easy ?level-next-medium ?level-next-hard)
    :precondition (and (loc ?current-pos-x) (loc ?current-pos-y)
                       (at ?current-pos-x ?current-pos-y) 
                       (soil-container ?container) 
                       (empty ?container)
                       (level ?level-next-easy)
                       (level ?level-next-medium)
                       (level ?level-next-hard)
                       (battery-level ?battery ?level-current)
                       (next-easy ?level-current ?level-next-easy) 
                       (next-medium ?level-current ?level-next-medium)
                       (next-hard ?level-current ?level-next-hard)
                       (not (critical ?level-current))
                  )
    :effect(and (not (empty ?container)) 
                (soil-sample ?container ?current-pos-x ?current-pos-y)
                (not (battery-level ?battery ?level-current)) 
                
                (when (easy-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-easy))  
                (when (medium-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-medium))
                (when (hard-soil ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-hard))               
           )
)

(:action analyse-soil
    :parameters (?container ?pos-x ?pos-y
                  ?battery ?level-current ?level-next-medium)
    :precondition (and (loc ?pos-x) (loc ?pos-y)
                       (soil-container ?container) 
                       (soil-sample ?container ?pos-x ?pos-y)
                       (battery-level ?battery ?level-current)
                       (next-medium ?level-current ?level-next-medium)
                       (not (critical ?level-current))
                  )
    :effect(and (soil-analysed ?pos-x ?pos-y)
                (not (battery-level ?battery ?level-current)) 
                (battery-level ?battery ?level-next-medium)
           )
) 

(:action empty-soil-container
    :parameters (?container ?pos-x ?pos-y
                 ?battery ?level-current ?level-next-easy)
    :precondition (and (loc ?pos-x) (loc ?pos-y)
                       (soil-container ?container)
                       (soil-sample ?container ?pos-x ?pos-y) 
                       (not (empty ?container))
                       (soil-analysed ?pos-x ?pos-y)
                       (battery-level ?battery ?level-current)
                       (next-easy ?level-current ?level-next-easy)
                       (not (critical ?level-current)))
    :effect (and (empty ?container)
                 (not (battery-level ?battery ?level-current)) 
                 (battery-level ?battery ?level-next-easy)
            )
)

;;;;;;;;;;;;;;;;rock;;;;;;;;;;;;;;;;;;
(:action collect-rock
    :parameters (?container  ?current-pos-x ?current-pos-y 
                 ?battery ?level-current 
                 ?level-next-easy ?level-next-medium ?level-next-hard)
    :precondition (and (loc ?current-pos-x) (loc ?current-pos-y)
                       (at ?current-pos-x ?current-pos-y) 
                       (rock-container ?container) 
                       (empty ?container)
                       (level ?level-next-easy)
                       (level ?level-next-medium)
                       (level ?level-next-hard)
                       (battery-level ?battery ?level-current)
                       (next-easy ?level-current ?level-next-easy) 
                       (next-medium ?level-current ?level-next-medium)
                       (next-hard ?level-current ?level-next-hard)
                       (not (critical ?level-current))
                   )
    :effect(and (not (empty ?container)) 
                (rock-sample ?container ?current-pos-x ?current-pos-y)
                (not (battery-level ?battery ?level-current)) 
                (when (easy-rock ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-easy))  
                (when (medium-rock ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-medium))
                (when (hard-rock ?current-pos-x ?current-pos-y) (battery-level ?battery ?level-next-hard))               
            )
)

(:action analyse-rock
    :parameters (?container ?pos-x ?pos-y
                 ?battery ?level-current ?level-next-medium)
    :precondition (and (loc ?pos-x) (loc ?pos-y)
                       (rock-container ?container) 
                       (rock-sample ?container ?pos-x ?pos-y)
                       (battery-level ?battery ?level-current)
                       (next-medium ?level-current ?level-next-medium)
                       (not (critical ?level-current))
                  )
    :effect (and (rock-analysed ?pos-x ?pos-y)
                 (not (battery-level ?battery ?level-current)) 
                 (battery-level ?battery ?level-next-medium)
            )
) 

(:action empty-rock-container
    :parameters (?container ?pos-x ?pos-y
                 ?battery ?level-current ?level-next-easy)
    :precondition (and (loc ?pos-x) (loc ?pos-y)
                       (rock-container ?container)
                       (rock-sample ?container ?pos-x ?pos-y) 
                       (not (empty ?container))
                       (rock-analysed ?pos-x ?pos-y)
                       (battery-level ?battery ?level-current)
                       (next-easy ?level-current ?level-next-easy)
                       (not (critical ?level-current))
                   )
    :effect (and (empty ?container)
                 (not (battery-level ?battery ?level-current)) 
                 (battery-level ?battery ?level-next-easy)
            )
)

;;;;;;;;;;;;;;;;image;;;;;;;;;;;;;;;;;;
(:action take-image
    :parameters (?storage ?pos-x ?pos-y
                 ?battery ?level-current ?level-next-easy)
    :precondition (and (loc ?pos-x) (loc ?pos-y)
                       (image-storage ?storage)
                       (battery-level ?battery ?level-current)
                       (next-easy ?level-current ?level-next-easy)
                       (not (critical ?level-current))
                   )
    :effect (and (image-taken ?pos-x ?pos-y)
                 (not (battery-level ?battery ?level-current)) 
                 (battery-level ?battery ?level-next-easy)
            )    
)
;;;;;;;;;;;;;;;;charging;;;;;;;;;;;;;;;;;;
(:action charge
    :parameters (?battery ?level-current ?level-next ?panel)
    :precondition (and (battery ?battery) 
                       (level ?level-current) 
                       (level ?level-next)
                       (battery-level ?battery ?level-current)
                       (next-charge ?level-current ?level-next) 
                       (critical ?level-current)
                       (panel ?panel)
                       (panel-opened)
                       ;(not (closed ?panel))
                  )
    :effect (and (not (battery-level ?battery ?level-current)) 
                 (battery-level ?battery ?level-next)
                 ;(closed ?panel)
            )
)

(:action open-panel
    :parameters (?panel)
    :precondition (and (panel ?panel)
                       (closed ?panel)
                  )
    :effect (and (when (max-light ?panel) 
                 (and (not (closed ?panel)) (panel-opened)))
            )
)

)

